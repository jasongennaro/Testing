{
  "openapi": "3.0.1",
  "info": {
    "title": "Stratosphere API",
    "version": "v1"
  },
  "paths": {
    "/api/{version}/devicedefinitions": {
      "get": {
        "tags": [
          "DeviceDefinitions"
        ],
        "summary": "Get all devices definitions.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get all devices accessible to the user.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates a device in stratosphere and Jetstream",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeviceModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeviceModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeviceModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeviceModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/devices/{id}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get for a specific device.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Edit a device in stratosphere and Jetstream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeviceModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeviceModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeviceModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeviceModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Performs the delete action.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get all items accessible to the user.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Creates a item",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get item by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Edit an Item by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete an Item by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/items/tagepc/{tagEpc}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Item by Tag EPC",
        "parameters": [
          {
            "name": "tagEpc",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Edit an Item by Tag EPC",
        "parameters": [
          {
            "name": "tagEpc",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete an Item by Tag EPC",
        "parameters": [
          {
            "name": "tagEpc",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get all location accessible to the user.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Post location form to create record",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get for a specific location.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "Edit location",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "Delete location",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": [
          "OrganizationKeyManagement"
        ],
        "summary": "Log in based on api key and secret",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/parlevels": {
      "get": {
        "tags": [
          "ParLevels"
        ],
        "summary": "Get all par level groups accessible to the user.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "ParLevels"
        ],
        "summary": "Post par level group form to create record",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiParLevelGroupModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiParLevelGroupModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiParLevelGroupModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiParLevelGroupModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/parlevels/{id}": {
      "get": {
        "tags": [
          "ParLevels"
        ],
        "summary": "Get par level group by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "ParLevels"
        ],
        "summary": "Edit of par level form",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiParLevelGroupModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiParLevelGroupModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiParLevelGroupModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiParLevelGroupModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ParLevels"
        ],
        "summary": "Delete a par level group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products accessible to the user.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Post product form to create record",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Edit of product form",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/products/code/{code}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get Product by Code",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Edit of product via product code",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/auditlogs": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate a report containing audit logs for the given time\r\nframe",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/detailedinventory": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate a report containing rows for every item in stock in available devices.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/allitems": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate a report containing rows for every item in stock in available devices.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/expiringitems": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate a report of all in-stock items that will expire by a given date.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onOrBeforeExpirationDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/transactions": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate a report containing all transactions for the devices the current user has access to.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "tag-epc",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/unassociatedtags": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate a report containing all tags in a device that aren't tied to a product.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeHidden",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/temperature": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generates a report with temperature data in the date range for all devices.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/parlevels": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate a report containing par levels for all items the user has access to",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/reports/slowmovinginventory": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate a report containing par levels for all items the user has access to",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "firstSeenAtLocationDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all Users accessible to the user.",
        "parameters": [
          {
            "name": "PerPage",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "POST: Create\r\nCreates user",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/{version}/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "PUT: Edit User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiBasicCredential": {
        "type": "object",
        "properties": {
          "PassRfid": {
            "pattern": "^[A-Fa-f0-9]{10}$",
            "type": "string",
            "nullable": true
          },
          "PassName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiDeviceModel": {
        "required": [
          "DeviceDefinition",
          "DeviceSerialNumber",
          "LocationId",
          "Name",
          "Region"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "maxLength": 128,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_]*$",
            "type": "string"
          },
          "DeviceSerialNumber": {
            "maxLength": 128,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_]*$",
            "type": "string"
          },
          "DeviceDefinition": {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9-_,. ]*$",
            "type": "string"
          },
          "Region": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "^[a-zA-Z]*$",
            "type": "string"
          },
          "LocationId": {
            "maximum": 18446744073709551615,
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "RecordCreatedDate": {
            "type": "string",
            "description": "Datetime indicating when the record was created",
            "format": "date-time"
          },
          "RecordLastEditDate": {
            "type": "string",
            "description": "Datetime indicating when the record was last edited",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "API Model representing a Device"
      },
      "ApiItemModel": {
        "required": [
          "TagEpc"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Primary key for Item.",
            "format": "int64"
          },
          "TagEpc": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier provided  by the tag on the item.\r\nThis is set to 512 because that is what our firmware can handle,\r\nand we may potentially need to handle values that long."
          },
          "ProductId": {
            "type": "integer",
            "description": "Id value for this Item's product.",
            "format": "int64"
          },
          "Batch": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Batch value that the Item was produced in.",
            "nullable": true
          },
          "Serial": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The unique serialized number used to identify this Item.",
            "nullable": true
          },
          "ExpirationDate": {
            "type": "string",
            "description": "The date that the Item expires.",
            "nullable": true
          },
          "DeviceId": {
            "type": "integer",
            "description": "Foreign key Id of the Device that read the Item.",
            "format": "int64",
            "nullable": true
          },
          "AliasId": {
            "type": "integer",
            "description": "Foreign key Id of the Alias that read the Item.",
            "format": "int64",
            "nullable": true
          },
          "RecordCreatedDate": {
            "type": "string",
            "description": "Datetime indicating when the record was created",
            "format": "date-time"
          },
          "RecordLastEditDate": {
            "type": "string",
            "description": "Datetime indicating when the record was last edited",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "API Model representing an Item"
      },
      "ApiKeyModel": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "AccessKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiLocationModel": {
        "required": [
          "Address",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "AccountId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "Address": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "City": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "StateProvince": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "PostalCode": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Country": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ContactName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ContactPhone": {
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "ContactEmail": {
            "maxLength": 128,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$",
            "type": "string",
            "nullable": true
          },
          "RecordCreatedDate": {
            "type": "string",
            "description": "Datetime indicating when the record was created",
            "format": "date-time"
          },
          "RecordLastEditDate": {
            "type": "string",
            "description": "Datetime indicating when the record was last edited",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "API Model representing a Location"
      },
      "ApiParLevelGroupModel": {
        "required": [
          "Id",
          "LocationIdList",
          "Name",
          "ParLevels"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of par level group",
            "format": "int64"
          },
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Name of par level group"
          },
          "LocationIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Ids of locations that have been assigned to par level group"
          },
          "ParLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiParLevelModel"
            },
            "description": "Par levels that have been assigned to par level group"
          },
          "LocationIds": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "API Model representing a ParLevelGroup"
      },
      "ApiParLevelModel": {
        "required": [
          "ProductCode"
        ],
        "type": "object",
        "properties": {
          "ProductCode": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Product code that par level is for"
          },
          "ProductId": {
            "type": "integer",
            "description": "Unique identifier for product",
            "format": "int64"
          },
          "Min": {
            "maximum": 30000,
            "minimum": 0,
            "type": "integer",
            "description": "Minimum value for par level",
            "format": "int32"
          },
          "Max": {
            "maximum": 30000,
            "minimum": 0,
            "type": "integer",
            "description": "Maximum value for par level",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "API Model representing a ParLevel item"
      },
      "ApiProductModel": {
        "required": [
          "Code",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of product",
            "format": "int64"
          },
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Name of product"
          },
          "Code": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Unique code of product"
          },
          "Active": {
            "type": "boolean",
            "description": "Bool indicating if product is active"
          },
          "IsRfid": {
            "type": "boolean",
            "description": "Bool indicating if this product is an RFID product"
          },
          "RecordCreatedDate": {
            "type": "string",
            "description": "Datetime indicating when the record was created",
            "format": "date-time"
          },
          "RecordLastEditDate": {
            "type": "string",
            "description": "Datetime indicating when the record was last edited",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "API Model representing a Product"
      },
      "ApiUserModel": {
        "required": [
          "BrowserSpecifiedTimeZone",
          "Email",
          "FirstName",
          "LastName"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "FirstName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "LastName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "TimeZoneId": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "maxLength": 128,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$",
            "type": "string",
            "format": "email"
          },
          "PhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "BrowserSpecifiedTimeZone": {
            "type": "boolean"
          },
          "LastLoginDate": {
            "type": "string",
            "format": "date-time"
          },
          "Active": {
            "type": "boolean"
          },
          "RolesList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "LocationsList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "BasicCredential": {
            "$ref": "#/components/schemas/ApiBasicCredential"
          },
          "Roles": {
            "type": "string",
            "description": "Roles field for searching via Dynamic Linq\r\nNot returned in the API",
            "nullable": true,
            "readOnly": true
          },
          "Locations": {
            "type": "string",
            "description": "Locations field for searching via Dynamic Linq\r\nNot Returned in the API",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "API Model representing a User"
      }
    }
  }
}